1. Explain the circumstances in which one should consider creating a package for their code

3. Use available package development tools (e.g., `usethis` and `devtools` in R) to create a small, simple software package

4. Be able to distinguish between essential software package elements (required to make a minimal software package) and those that are not essential but act to improve the user and developer experiences.
5. Define what a namespace is.
6. Explain the role of the code within the following software package files:
  - Python
    - `pyproject.toml`
    - `__init__.py`
    - `docs/*`
    - `.github/workflows/ci-cd.yml`
  - R
    - `DESCRIPTION`
    - `NAMESPACE`
    - `man/*.Rd`

7. Explain at a high level how the Cookiecutter project template tool works.
8. Compare and contrast how the Cookiecutter project template tool sets up a software package structure to how `devtools` and `usethis` set up a software package.

9. Generate well formatted function and package-level documentation for software packages using available tools (e.g., `Roxygen2` and `pkgdown` in R, or numpy-style dosctrings and Sphinx in Python)
